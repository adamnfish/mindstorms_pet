/*
Subroutines to control the pet's movements.

Contains underlying movement subs as well as specific sets of
movements for re-usable behaviours.
 */

// motors
#define MOTORS		OUT_BC
#define MOTOR_L		OUT_C
#define MOTOR_R		OUT_B

inline void stop_motors()
{
  Off(MOTORS);
}

safecall void start_movement(int power)
{
  if(power > 0){
    OnFwdReg(MOTORS, power, OUT_REGMODE_SYNC);
  } else{
    OnRevReg(MOTORS, -power, OUT_REGMODE_SYNC);
  }  
}

safecall void move_straight(int power, int duration, bool coast=true)
{
  start_movement(power);
  Wait(duration);
  if(coast){
    Coast(MOTORS);
  } else{
    stop_motors();
  }
}

safecall void turn(int degrees)
{
  // turn the robot by some number of degrees
  float motor_angle;

  stop_motors();
  // normalise degrees to motor spin angle
  motor_angle = degrees * 6.15;
  degrees = motor_angle;
  if(degrees > 0){
    // turn right
    RotateMotorEx(MOTORS, 70, degrees, 100, true, true);
  } else{
    // turn left
    RotateMotorEx(MOTORS, 70, degrees, -100, true, true);
  }
}

safecall void shake(int count)
{
  // shakes from side to side
  int shake_time = 150;

  OnFwd(MOTOR_L, 75);
  Wait(shake_time / 2);
  for(int i=0; i<count; i++){
    OnRev(MOTOR_L, 75);
    OnFwd(MOTOR_R, 75);
    Wait(shake_time);
    OnFwd(MOTOR_L, 75);
    OnRev(MOTOR_R, 75);
    Wait(shake_time);
  }
  Off(MOTOR_R);
  OnRev(MOTOR_L, 75);
  Wait(shake_time);
  Off(MOTOR_L);
}
